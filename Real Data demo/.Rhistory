source('Gen_data.R')
source('PFLR_RKHS_estimate.R')
source('PFLR_Yao_estimate.R')
source('Results_summary.R')
source('simu_fun.R')
source('Gen_data.R')
source('PFLR_RKHS_estimate.R')
source('PFLR_Yao_estimate.R')
source('simu_fun.R')
n <- 200
pn <- 15
nu <- 2
rho1 <- 0.2
rho2 <- 0.7
eigen_center <- 3
sd_noise <-1
kp=1 ## for Gaussian kernel
k <- 50
lent <- 100
locations <- seq(0, 1, length=lent)
data <- Gen_data(n, pn,  k, locations, nu, rho1,rho2, eigen_center, sd_noise)
y <- data$y
x <- data$x
z <- data$z
?saveRDS
saveRDS(x,y,z, file='Demo_data')
save(x,y,z, file='Demo_data.Rdata')
rm(list=ls())
load("Demo_data.Rdata")
size(z)
dim(z)
source('PFLR_RKHS_estimate.R')   ### the proposed method
source('PFLR_Yao_estimate.R')
n <- length(y) # sample size
pn <- dim(z)[2]
lent <- dim(x)[2]
locations <- seq(0, 1, length=lent)
nbasis <- n                       # the basis for the RHKS estimates of the functional coefficient, default is n.
kp=1
K_gram <- outer( locations, locations, function(x, y) exp(-(x-y)^2/kp) )  ## Gaussian Kernel
Sigma_mat <- x%*%K_gram%*%t(x)/(lent^2)
lambda_range.1 <-  seq(0.01, 0.02, length=5) ## penalty tuning for the functional coefficient
sp_range <- c(3,4,5,6,7)                     ## sparsity level for the scalar coefficients
init_gamma <- rep(0, pn)   ### Initial value for gamma
max_iter <- 200
sn_range <- c(2,3,4,5,6)   ## number of Fpcs for Yao's method
lambda_range.2 <- seq(0.2, 0.35, length=5)  ## penalty tuning for the scad penalty of Yao's method
t0 <- Sys.time()
fit_proposed <-PFLR_RKHS_estimate(y, x, z, K_gram, Sigma_mat,locations,n_basis, lambda_range.1, sp_range, init_gamma, max_iter)
t_proposed <- difftime(Sys.time(), t0, units='secs')
t_proposed
t1 <- Sys.time()
fit_Yao <- PFLR_Yao_estimate(y, x, z, locations, sn_range, lambda_range.2)
t_Yao <- difftime(Sys.time(), t1, units='secs')
View(fit_proposed)
rm(list=ls())
source('PFLR_RKHS_estimate.R')   ### the proposed method
source('PFLR_Yao_estimate.R')    ### the method proposed by Kong et al. (2016)
####################
### Load data ######
####################
load("Demo_data.Rdata")
# y: the scalar response
# x: the functional predictior, n*lent with n denotes the sample size and lent denotes the number of observations in the functional domain
# z: the high-dimensional scalar covariates, n*pn with pn denotes the number of scalar covariates
# Model
###################
# y = z^\top \gamma + \int x(t) \beta(t) +\epsilon(t)
#
n <- length(y) # sample size
pn <- dim(z)[2]
lent <- dim(x)[2]
locations <- seq(0, 1, length=lent)
###############################
## tuning parameters settings #
###############################
nbasis <- n                       # the basis for the RHKS estimates of the functional coefficient, default is n.
kp=1
K_gram <- outer( locations, locations, function(x, y) exp(-(x-y)^2/kp) )  ## Gaussian Kernel
Sigma_mat <- x%*%K_gram%*%t(x)/(lent^2)
###########
lambda_range.1 <-  seq(0.01, 0.02, length=5) ## penalty tuning for the functional coefficient
sp_range <- c(3,4,5,6,7)                     ## sparsity level for the scalar coefficients
init_gamma <- rep(0, pn)   ### Initial value for gamma
max_iter <- 200
sn_range <- c(2,3,4,5,6)   ## number of Fpcs for Yao's method
lambda_range.2 <- seq(0.2, 0.35, length=5)  ## penalty tuning for the scad penalty of Yao's method
##############
t0 <- Sys.time()
fit_proposed <-PFLR_RKHS_estimate(y, x, z, K_gram, Sigma_mat,locations,n_basis, lambda_range.1, sp_range, init_gamma, max_iter)
t_proposed <- difftime(Sys.time(), t0, units='secs')
#fit_proposed$final_results: results for the selected tuning
#fit_proposed$final_results$gamma_est: estimate for gamma
#fit_proposed$final_results$beta_est: esetimate for beta
#fit_proposed$final_results$idx: True denotes that the scalar is selected
#fit_proposed$results.sp.all: resutls for all the sparsity level (sp_range)
t1 <- Sys.time()
fit_Yao <- PFLR_Yao_estimate(y, x, z, locations, sn_range, lambda_range.2)
t_Yao <- difftime(Sys.time(), t1, units='secs')
fit_proposed$final_results$idx: True denotes that the scalar is selected
fit_proposed$final_results$idx
source('Gen_data.R')
source('PFLR_RKHS_estimate.R')
source('PFLR_Yao_estimate.R')
n <- 200
pn <- 10000
nu <- 2
rho1 <- 0.2
rho2 <- 0.3
eigen_center <- 1
sd_noise <-1
kp=1 ## for Gaussian kernel
k <- 50
lent <- 100
locations <- seq(0, 1, length=lent)
data <- Gen_data(n, pn,  k, locations, nu, rho1,rho2, eigen_center, sd_noise)
y <- data$y
x <- data$x
z <- data$z
n <- length(y) # sample size
pn <- dim(z)[2]
lent <- dim(x)[2]
locations <- seq(0, 1, length=lent)
nbasis <- n                       # the basis for the RHKS estimates of the functional coefficient, default is n.
kp=1
K_gram <- outer( locations, locations, function(x, y) exp(-(x-y)^2/kp) )  ## Gaussian Kernel
Sigma_mat <- x%*%K_gram%*%t(x)/(lent^2)
###########
lambda_range.1 <-  seq(0.01, 0.02, length=5) ## penalty tuning for the functional coefficient
sp_range <- c(3,4,5,6,7)                     ## sparsity level for the scalar coefficients
init_gamma <- rep(0, pn)   ### Initial value for gamma
max_iter <- 200
sn_range <- c(2,3,4,5,6)   ## number of Fpcs for Yao's method
lambda_range.2 <- seq(0.2, 0.35, length=5)  ## penalty tuning for the scad penalty of Yao's method
##############
t0 <- Sys.time()
fit_proposed <-PFLR_RKHS_estimate(y, x, z, K_gram, Sigma_mat,locations,n_basis, lambda_range.1, sp_range, init_gamma, max_iter)
t_proposed <- difftime(Sys.time(), t0, units='secs')
t_proposed-t0
t_proposed
sum(fit_proposed$final_results$idx)
t1 <- Sys.time()
fit_Yao <- PFLR_Yao_estimate(y, x, z, locations, sn_range, lambda_range.2)
t_Yao <- difftime(Sys.time(), t1, units='secs')
t_Yao
165/60
rm(list=ls())
setwd('/Users/liting/Documents/projects/PFLR-high-RKHS/PFLR_implementation/Simulation demo')
source('Gen_data.R')
source('PFLR_RKHS_estimate.R')
n <- 200
pn <- 150
nu <- 2
rho1 <- 0.2
rho2 <- 0.3
eigen_center <- 1
sd_noise <-1
kp=1 ## for Gaussian kernel
k <- 50
lent <- 100
locations <- seq(0, 1, length=lent)
B=4
data <- Gen_data(n, pn,  k, locations, nu, rho1,rho2, eigen_center, sd_noise, B)
y <- data$y
x <- data$x
z <- data$z
type='Gaussian'
K_gram_Gaussian <- outer( locations, locations, function(x, y) exp(-(x-y)^2/kp) )
nbasis <- n
lambda_range.1 <-  seq(1e-5, 0.1, length=50) ## for Gaussian
sp_range <- c(1:50)
init_gamma <- rep(0, pn)
max_iter <- 200
Sigma_mat <- x%*%K_gram%*%t(x)/(lent^2)
K_gram <- outer( locations, locations, function(x, y) exp(-(x-y)^2/kp) )
fit_proposed <-PFLR_RKHS_estimate(y, x, z, K_gram, Sigma_mat,locations,n_basis, lambda_range.1, sp_range, init_gamma, max_iter)
Sigma_mat <- x%*%K_gram%*%t(x)/(lent^2)
fit_proposed <-PFLR_RKHS_estimate(y, x, z, K_gram, Sigma_mat,locations,n_basis, lambda_range.1, sp_range, init_gamma, max_iter)
rm(list=ls())
output_path <- '/Users/liting/Documents/projects/PFLR-high-RKHS/PFLR_implementation/Data/'
data_path  <- '/Users/liting/Documents/projects/PFLR-high-RKHS/PFLR_implementation/Data/'
### gene_id_position #############
gene_ID_position <- read.table( paste0(data_path, '/select_month/gene_ID_position_for_month12.txt'),header=F)$V1
gene_ID_position <- read.table( paste0(data_path, 'select_month/gene_ID_position_for_month12.txt'),header=F)$V1
gene_ID_position <- read.table( paste0(data_path, 'gene_ID_position_for_month12.txt'),header=F)$V1
gene_data <- as.matrix( read.csv( paste0( data_path, 'SNP_select_combine.csv'), header=T) )[, -1]
dim(gene_data)
y<- read.csv( paste0(data_path, 'select_month12_scores.csv'),header=T)
setwd('/Users/liting/Documents/projects/PFLR-high-RKHS/PFLR_implementation/Real Data demo')
rm(list=ls())
final_image <- as.matrix( read.table(('./Data/Hippocampus_left.txt'), header=F) )
dim(final_image )
source('PFLR_RHKS_image.R')
dim_1 <- 100
dim_2 <- 150
dim <- dim_1*dim_2
locations_1 <- seq(0,1, length=dim_1)
locations_2 <- seq(0,1, length=dim_2)
locations <- cbind( rep(locations_1, dim_2), rep(locations_2, each=dim_1) )
#### dim*dim matrix####
kp <- 1
K_gram <- outer( c(1:dim), c(1:dim), function(x, y) exp(-( (locations[x,1]-locations[y,1])^2 +(locations[x,2]-locations[y,2])^2  )/kp)  )
D <- as.matrix( read.csv('./Data/final_clinical_m12_used', header=T) )
D <- as.matrix( read.csv('./Data/final_clinical_m12_used.csv', header=T) )
View(D)
y <- D[, 15]  # MMSE score
n <- dim(D)[1] # sample size
colnames(D)[c(4,6,10:14)]
D[, c(4,6,10:14)] <- scale(D[, c(4,6,10:14)], center = T, scale = T)  # scale the continuous variable
View(D)
D <- D[, -c(1, 7:9)]  # exclude APOE4 and diagnosis
View(D)
D <- D[, -c(1, 7:9,15)]  # exclude APOE4 and diagnosis
View(D)
D <- as.matrix( read.csv('./Data/final_clinical_m12_used.csv', header=T) )
y <- D[, 15]  # MMSE score
n <- dim(D)[1] # sample size
D[, c(4,6,10:14)] <- scale(D[, c(4,6,10:14)], center = T, scale = T)  # scale the continuous variable
D <- D[, -c(1, 7:9,15)]  # exclude APOE4 and diagnosis
View(D)
inv_DD <- solve( crossprod(D, D), diag( dim(D)[2] ) )
Projection_D <- diag(n) - tcrossprod( tcrossprod(D, inv_DD), D)
lent <-dim
nbasis <- n       # the basis for the RHKS estimates of the functional coefficient, default is n.
###########
lambda_range.1 <-  seq(0.01, 0.02, length=5) ## penalty tuning for the functional coefficient
sp_range2 <- c(50:100)
max_iter <- 50
lambda_ridge <- 1e-4
x_nonProject <- final_image
x <- Projection_D%*%x_nonProject
x_center <- scale(x, center = T, scale = F)
Sigma_mat <- x_center%*%K_gram%*%t(x_center)/(dim^2)
###### Create Kx_gram #####################
Kx_gram <- x_center %*%K_gram/dim
D <- as.matrix( read.csv('./Data/final_clinical_m12_used.csv', header=T) )
n <- dim(D)[1] # sample size
D[, c(4,6,10:15)] <- scale(D[, c(4,6,10:15)], center = T, scale = T)  # scale the continuous variable
y <- D[, 15]  # MMSE score
D <- D[, -c(1, 7:9,15)]  # exclude APOE4 and diagnosis
inv_DD <- solve( crossprod(D, D), diag( dim(D)[2] ) )
Projection_D <- diag(n) - tcrossprod( tcrossprod(D, inv_DD), D)
lambda_range.1 <-  seq(0.01, 0.02, length=5) ## penalty tuning for the functional coefficient
sp_range2 <- c(50:100)
max_iter <- 50
lambda_ridge <- 1e-4
x_nonProject <- final_image
x <- Projection_D%*%x_nonProject
x_center <- scale(x, center = T, scale = F)
########## Create the Sigma matrix ########
Sigma_mat <- x_center%*%K_gram%*%t(x_center)/(dim^2)
###### Create Kx_gram #####################
Kx_gram <- x_center %*%K_gram/dim
###############################
## tuning parameters settings #
###############################
lent <-dim
nbasis <- n
y_nonProject <- y
z_nonProject <- scale(gene_data, center=T, scale=T)
gene_data <- as.matrix( read.csv('./Data/SNP_select_combine.csv', header=T) )[, -1]
z_nonProject <- scale(gene_data, center=T, scale=T)
y <- Projection_D%*%y_nonProject
z <- Projection_D%*%z_nonProject
y_center <- y - mean(y)
z_center <- scale(z, center = T, scale = F)
pn <- dim(z)[2]
init_gamma <- rep(0, pn)   ### Initial value for gamma
###################
fit_proposed <- PFLR_RKHS_image(y_center, x_center, z_center, K_gram, Kx_gram, Sigma_mat,n_basis,
lambda_range.1, sp_range2, init_gamma, max_iter,dim_1,dim_2,lambda_ridge)
